# import os.path
# import uuid
# from datetime import datetime, timedelta

# from google.auth.transport.requests import Request
# from google.oauth2.credentials import Credentials
# from google_auth_oauthlib.flow import InstalledAppFlow
# from googleapiclient.discovery import build

# # If modifying these SCOPES, delete token_calendar.json.
# SCOPES = ['https://www.googleapis.com/auth/calendar']

# def authenticate_calendar():
#     """
#     Authenticate the user and return a Calendar API service object.
#     Uses 'token_calendar.json' to store credentials.
#     """
#     creds = None
#     token_file = 'client_calender_secret.json'
#     if os.path.exists(token_file):
#         creds = Credentials.from_authorized_user_file(token_file, SCOPES)

#     if not creds or not creds.valid:
#         if creds and creds.expired and creds.refresh_token:
#             creds.refresh(Request())
#         else:
#             # This will open a browser window for the OAuth flow.
#             flow = InstalledAppFlow.from_client_secrets_file('client_secret.json', SCOPES)
#             creds = flow.run_local_server(port=0)
#         with open(token_file, 'w') as token:
#             token.write(creds.to_json())
#     return build('calendar', 'v3', credentials=creds)

# def create_google_meet_event():
#     """
#     Creates a calendar event with a Google Meet link.
#     The event starts 5 minutes from now and lasts 30 minutes.
#     """
#     service = authenticate_calendar()

#     # Define meeting details
#     meeting_title = "Test Meeting via Google Calendar API"
#     meeting_description = "This meeting is auto-generated by Python with a Google Meet link."
    
#     # Set start and end times (UTC in ISO format)
#     start_time = datetime.utcnow() + timedelta(minutes=5)
#     end_time = start_time + timedelta(minutes=30)

#     # Build event details with conferenceData so that Google Meet link is generated.
#     event = {
#         'summary': meeting_title,
#         'description': meeting_description,
#         'start': {
#             'dateTime': start_time.isoformat() + 'Z',  # Append 'Z' to indicate UTC time
#             'timeZone': 'UTC',
#         },
#         'end': {
#             'dateTime': end_time.isoformat() + 'Z',
#             'timeZone': 'UTC',
#         },
#         'conferenceData': {
#             'createRequest': {
#                 'requestId': str(uuid.uuid4()),  # Unique identifier for the conference request
#                 'conferenceSolutionKey': {
#                     'type': 'hangoutsMeet'
#                 },
#             }
#         },
#         # Optional: you can also add attendees, reminders, etc.
#     }

#     try:
#         created_event = service.events().insert(
#             calendarId='primary',
#             body=event,
#             conferenceDataVersion=1  # Must be set to 1 to indicate conference data creation
#         ).execute()

#         print('âœ… Meeting created successfully!')
#         print('Event link:', created_event.get('htmlLink'))
#         meet_link = created_event.get('hangoutLink')
#         if meet_link:
#             print("Google Meet Link:", meet_link)
#         else:
#             print("No Google Meet link returned.")
#     except Exception as e:
#         print("Error creating meeting:", e)

# if __name__ == "__main__":
#     create_google_meet_event()

import os
import uuid
from datetime import datetime, timedelta

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# Define the required Calendar API scope.
SCOPES = ['https://www.googleapis.com/auth/calendar']

def authenticate_calendar():
    """
    Authenticate using OAuth2 credentials and return a Calendar API service object.
    It uses a token file 'token_calendar.json' to cache credentials.
    """
    creds = None
    token_file = 'token_calendar.json'
    
    # Try to load existing credentials from token file
    if os.path.exists(token_file):
        creds = Credentials.from_authorized_user_file(token_file, SCOPES)
    
    # If no valid credentials available, run through the OAuth flow.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            # Use the downloaded client credentials file.
            flow = InstalledAppFlow.from_client_secrets_file('client_calender_secret.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run.
        with open(token_file, 'w') as token:
            token.write(creds.to_json())
    
    # Build and return the Calendar API service.
    return build('calendar', 'v3', credentials=creds)

def create_google_meet_event():
    """
    Creates a Google Calendar event with an auto-generated Google Meet link.
    The event starts in five minutes and lasts for 30 minutes.
    """
    service = authenticate_calendar()

    # Define meeting details.
    meeting_title = "Test Meeting via Python"
    meeting_description = "This meeting is created by the Google Calendar API with a Google Meet link."
    
    # Set event start and end times (UTC).
    start_time = datetime.utcnow() + timedelta(minutes=5)
    end_time = start_time + timedelta(minutes=30)

    # Create the event body.
    event = {
        'summary': meeting_title,
        'description': meeting_description,
        'start': {
            'dateTime': start_time.isoformat() + 'Z',  # 'Z' indicates UTC time.
            'timeZone': 'UTC',
        },
        'end': {
            'dateTime': end_time.isoformat() + 'Z',
            'timeZone': 'UTC',
        },
        'conferenceData': {
            'createRequest': {
                'requestId': str(uuid.uuid4()),  # Unique ID for this conference request.
                'conferenceSolutionKey': {
                    'type': 'hangoutsMeet'
                },
            }
        },
    }

    # Insert the event with conferenceDataVersion=1 flag.
    created_event = service.events().insert(
        calendarId='primary',
        body=event,
        conferenceDataVersion=1
    ).execute()

    print("Meeting created successfully!")
    print("Event link:", created_event.get('htmlLink'))
    meet_link = created_event.get('hangoutLink')
    if meet_link:
        print("Google Meet Link:", meet_link)
    else:
        print("No Google Meet link returned.")

if __name__ == "__main__":
    create_google_meet_event()
